Nenhuma das estruturas foi preparada para lidar com itens duplicados, a próxima
 versão das eds deverão ser capazes de lidar com esta situação

arvore
    documentar o módulo

    arvore
        refatorar o método inserir(item, pai)

    _IteradorPorNivel
        método __init__(raiz, nivel)
            deveria lançar uma exceção ao se informar um valor negativo no
            segundo parâmetro, ou pelo menos não deveria iterar por todos os
            nodos descentendetes da raiz para evitar processamento
            desnecessário.

    _IteradorInterFixado
        _iterador(nodo)
            o método deveria retornar uma tupla, não lembro o porquê, mas acho
            que o motive é que as tuplas são menores e talvez até mais rápidas
            que geradores (até ums 3 itens)

    ArvoreVP
        refatorar toda a classe
        documentá-la

    Heap
        _extremaEsquerda()
            next(_IteradorPosFixado(self._raiz)) ->
            next(_IteradorInterFixado(self._raiz))

    ArvoreAVL
        refatorar o método _rebalancear()

grafo:
   ao pedir os trajetos de A para E os clientes podem desejar informações
sobre o trajeto completo, distância total, duração total etc, ou eles podem
querer informações sobre partes do trajeto, distância/duração de A para B, ou
distância/duração de B para C etc. eu devo fornecer um meio para obter
qualquer informação desejada facilmente. ✓

  melhorar o trecho de código
            for l in v2.ligacoes:
                if l is ligacao:
                    v2.remover(ligacao)
                    self._totalDeLigacoesNaoOrientadas -= 1
                    break
            else:
                self._totalDeLigacoesOrientadas -= 1
  no método grafo._desligar(a, b, filtro)

  1) o dicio que representa as ligações deve ser substituído por um objeto que
  permita acessar as informações da ligação através de atributos do objeto,
  exemplo, ligacao.distancia

  2) escrever a documentação do grafo
  3) escrever os funções de testes auxiliares que trabalham com iteráveis ✓
  4) reescrever o código de testes do grafo
  5) determinar o comportamento do grafo ao tentar inserir um item e ligá-lo a
   b, mas este não pode ser localizado

  6) o método contains deve ser capaz de trabalhar com ligações também
  7) refatorar o método caminhos(a, b)
  8) refatorar o método ligar(a, b)
  9) refatorar o método remover(item)
  10) documentar a classe _Vertice e seus atributos
  11) os métodos caminhos e caminhosMinimos retornam uma lista ? substituir por
   tupla ? padronizar com os outros métodos?
  12) refatorar o método Grafo.arvoreCoberturaMinima.
  OBS.: existem alguns casos nos quais é possível determinar a acm mesmo com
  algumas ligações sem a distância informada que atualmente o método gera um
  erro. ver arquivo testes/arcevo/casosDeTestesGrafo
  OBS2.: existem alguns casos nos quais é possível determinar a acm mesmo com
  algumas ligações orientadas e que atualmente o método gera um erro.
  13) o método grafo.caminhos calcula a distância total de um caminho se os
  trechos possuirem a distância informada, o mesmo deve acontecer para outros
  valores por exemplo preço, se forem informados preços para os trechos o
  método deve calcular o preço total, dize-se então que o grafo trabalha com
  preço, o grafo deve ser capaz de trabalhar com outras variáveis também como
  peso, calculando o peso total de uma caminho.

